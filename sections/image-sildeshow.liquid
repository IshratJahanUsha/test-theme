<style>
  .carousel {
    position: relative;
    margin-top: {{section.settings.top_margin| times: 0.5 | round: 0}}px;
    margin-bottom: {{section.settings.bottom_margin| times: 0.5 | round: 0}}px;
    width: 100%;
    height: 80vh;
  }

  @media screen and (min-width: 750px) {
    .carousel {
    margin-top: {{section.settings.top_margin}}px;
    margin-bottom: {{section.settings.bottom_margin}}px;
    }
  }

  .carousel__track-container {
    position: relative;
    background: #592;
    height: 100%;
    width: 100%;
    overflow: hidden;
  }

  .carousel__track {
    position: relative;
    height: 100%;
    margin: 0;
    padding: 0;
    list-style: none;
    transition: transform ease-in {{ section.settings.speed_sliding}}s;
  }

  .carousel__slide {
    position: absolute;
    {% comment %} width: 100%; {% endcomment %}
    width: 100vw;
    top: 0;
    bottom: 0;
  }

  .carousel__image,.fallback_carousel__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .text_container {
    position: absolute;
    width: 75%;
    text-align: center;
    color: var(--primary-background);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
  }
  .text_container h2 {
    text-transform: uppercase;
  }
  .text_container p {
    margin-top: 2rem;
    font-weight: 600;
  }
  @media screen and (min-width: 768px) {
    .text_container p {
      margin-top: 3rem;
    }
  }
  .carousel__button {
    color: var(--primary-background);
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: 0;
    cursor: pointer;
    z-index: 5;
  }

  .carousel__button--left {
    left: 0;
  }

  .carousel__button--right {
    right: 0;
  }

  .carousel__nav {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    justify-content: center;
    padding: 10px 0;
  }

  .carousel__indicator {
    width: 15px;
    height: 15px;
    border: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    margin: 0 12px;
    cursor: pointer;
  }

  .carousel__indicator.current-slide {
    background: rgba(255, 255, 255, 0.75);
  }

  .hidden {
    display: none;
  }
  .visibility{
    visibility: hidden;
  }
</style>
<div class="carousel">



  <section style="color: black; margin-block: 1.5rem;">
    <p>
      Web development, also known as website development, refers to the tasks associated with creating, building, and
      maintaining websites and web applications that run online on a browser. It may, however, also include web design,
      web programming, and database management.

      Web development is closely related to the job of designing the features and functionality of apps (web design). The
      term development is usually reserved for the actual construction of these things (that is to say, the programming of
      sites).

      The basic tools involved in web development are programming languages called HTML (Hypertext Markup Language), CSS
      (Cascading Style Sheets), and JavaScript. There are, however, a number of other programs used to “manage” or
      facilitate the construction of sites that would otherwise have to be done “from scratch” by writing code. A number
      of content management systems (CMS) fall into this category, including WordPress, Joomla!, Drupal, TYPO3, and Adobe
      Experience Manager, among others. Web development is closely related to the job of designing the features and
      functionality of websites and apps (often called “web design”), but the “web development” term is usually reserved
      for the actual construction and programming of websites and apps. Think of all the web pages you have used over the
      years – Web Developers built those sites, making sure they functioned properly and performed in ways that allowed
      for a great user experience. Web Developers do this by writing lines of code, using a variety of programming
      languages, which vary depending on the tasks they are performing and the platforms they are working on.Front-end
      development involves the “client-facing” side of web development. That is to say usually, front-end web development
      refers to the portion of the site, app, or digital product that users will see and interact with. A Front-End
      Developer, therefore, is responsible for the way a digital product looks and “feels,” which is why they are often
      also referred to as Web Designers.

      Front-End Web Developers focus on translating website design and visual ideas into code. A front-end Software
      Developer takes the design ideas created by others on web development teams and programs them into reality, acting
      as a bridge between design and technology. Front-End Developers will usually need to possess a solid understanding
      of programming languages, including HTML, CSS, and JavaScript, as well as frameworks like React, Bootstrap,
      Backbone, AngularJS, and EmberJS. Responsibilities of a Front-End Developer would include creating responsive
      websites (that look and function well on any device), conducting website testing and fixing any bugs detected along
      the web development process, and ensuring site structure follows SEO best practices.If Front-End Developers are
      responsible for how a digital product looks, Back-End Developers are focused on how it works. A Back-End Developer
      creates the basic framework of a website before maintaining it and ensuring it performs the way it should, including
      database interactions, user authentication, server, network and hosting configuration, and business logic. Working
      behind the scenes – or server-side – Back End Developers are concerned with the systems and structures that allow
      computer applications to perform as desired.

      The primary responsibility of Back-End Developers is to ensure the functionality of the site, including its
      responsiveness and speed. To do that, Back-End Developers have to know how to build servers with modern frameworks
      (while developing custom APIs and serving static websites and files), and how to manage databases and data on a web
      server. Typically, Back-End Developers use server-side programming languages, including PHP, Ruby, and Python, as
      well as tools including MySQL, Oracle, and Git.A Full-Stack Developer is someone familiar with both front- and
      back-end development. Full Stack Developers usually understand a wide variety of programming languages and because
      of their versatility, they might be given more of a leadership role on projects than developers who specialize. They
      are generalists, adept at wearing both hats, and familiar with every layer of development. Obviously, employers want
      to hire Full-Stack Developers – according to an Indeed study, they are the fourth-most in-demand job in tech.

      If the title is contentious, it’s in the generalist nature of the position. Developers who specialize in the
      front-end or back-end often bristle at the notion that someone could be equally adept at both – the expression
      “jack-of-all-trades, master of none” comes to mind. “My defensive tendencies are normally put on high alert when I
      hear that magic phrase (‘full-stack’),” wrote Front-End Developer Andy Shora. “Stacks are a lot bigger than what
      they used to be, and being able to claim one has acquired refined skills at every layer of web development is
      certainly not a small claim. Does this mean you have a broad range of skills or you specialize in everything?” While
      that perception persists, there still is an increasing number of tech professionals who consider themselves
      Full-Stack Developers. According to a recent Stack Overflow survey of Developers, 48.2 percent consider themselves
      Full-Stack Developers. What’s unclear is whether Developers are now expected to possess a broader skillset, or if
      Developers are taking it upon themselves to understand functions at both the front-end and back-end. Either way,
      it’s becoming increasingly important for aspiring Developers to have a foundation in both. “For most people hoping
      to break into web improvement, you should center around working up an establishment in both front-end and back-end
      advancement first,” recommended Software Engineer and Tech Writer Muhammad Anser. “At that point, you can float
      towards a claim to fame later on.” And with demand for Developers expected to grow 15 percent by 2026 (for 24,400
      new jobs), much faster than the U.S. average rate of job growth, there may not be a better time to dive in and learn
      more about all the layers of Web Development.

      At the outset, web designing emerged as an easier and simple way of exchanging information. It was a better means of
      communication and had better networking benefits compared to the commercial reasons. Later on, the Web became an
      avenue for making profits, and the information space that was prior for providing free exchange thus changed to a
      space for commercial transactions.

      The open source movement first emerged when major players met and decided to begin the initiative of licensing to
      protect software developers. The movement was therefore a licensing measure meant to make source codes available to
      others beside the author through leasing.

      There was also need to allow programmers to distribute their software freely and enable people to modify source
      codes. The current web-based software developers such as PHP, Firefox, WordPress and Linux are thus major
      contributors to development of modern websites. Open source has consequently had a direct influence on web
      development and browsing such as flexibility and innovative development initiatives in addition to providing network
      solutions.

      Development of ‘open source’ receives very little attention especially official concerns by the initial founders for
      its development. The initial organizations to benefit from the open licensing systems directly included the
      Department of Defence (DOD), Research Agencies, and the Lab researchers such as National Laboratories (Reece et al,
      92). These organizations were the most viable producers, users and beneficiaries of the licensing operation.

      The firms also provided the platform for major advances such as the firewalls, and other network security tools.
      Open licensing therefore caused firms to merge ideas and integrate development of operating systems and related
      software to high-tech but inexpensive software/hardware supercomputers to replace the original Pentium-based
      systems.

      Although departments such as the DOD or Space Agencies may have developed or initiated most of the research into
      open source, in overall, today’s beneficiaries include commercial agencies. Commercial enterprises such as Netscape,
      Red Hat, Cygnus, MacAfee and Caldera were quick to realize the opportunities offered by web-based methodologies and
      begun to offer the open source arrangements.

      Other firms that latter on came in support of open source included the hardware developers such as Dell,
      Hewlett-Packard, Compaq, Sun Microsystems and IBM (International Business Machines) among others. Consistent with
      VanDyk, the concept open source emerged from software engineers, but today the entire movement is made of
      technologically motivated individuals (9). They focus more on technological productivity as opposed to economical
      benefits.

      Developments Although the initial authors retain all the rights of their code, restrictions are less and simpler to
      allow others to utilize the code. Today, different countries have constitutions supporting the freedom of speech.
      Users never thought programs would be freeware in a manner comparable to the way verbal communication is an
      inalienable right today. Redistribution of software code does not face unnecessary restriction, since developers
      found that ‘open source’ is an effective way of finding and correcting faulty codes.

      Open source also encourages reliability and quality of software due to the independent reviews and the rapid dynamic
      nature of the web-based programming. According to Van Reijswoud, the simplified way of defining ‘open source’ may
      appear more pervasive compared to technical definition (230).

      The open form of licensing allows any individual developer as well as a corporation to give others freedom to change
      competence and quality of a code, at the same time retain ownership as long as the beneficiaries agree to equally
      share the code with others under similar terms of agreement.

      This form of web development allows development of new web programmers particularly among users who wish to make
      their contributions on success and quality of products. Web development has therefore advanced to allow better
      distribution of expertise through refinement of existing codes. Experts are also able to provide new services
      through innovation and inspired creations.

      The new trend of user-developer enhances development of diverse and advanced modern websites. Open source therefore
      allows a progressive form of dynamism that is almost impossible to achieve given any other condition that developers
      may find (Meeker, 38). There is a revolution on the way the software engineering industry has developed in terms
      software quality and ability to assist beneficiaries from the developments.

      Current success of the internet is for the reason that there is direct success of the open source form of web
      development. Success of World Wide Web therefore indicates the evolution and power of open content. According to
      Richter, ‘open source’ is a form of licensing that affects development, distribution and use of software, thus
      causing direct change on corporations (281). It assists to focus innovation of information technology to ensure
      generation of profits.
    </p>
  </section>

{% comment %}
{% endcomment %}

  <button class="carousel__button padding carousel__button--left hidden {% if section.settings.show_arrows == false %} visibility{% endif %}">
    {% render 'icon-left-arrow' %}
  </button>

  <div class="carousel__track-container">
    <ul class="carousel__track">
      {% for block in section.blocks %}
        <li class="carousel__slide {% if forloop.first %} current-slide{% endif %}">
          {% if block.settings.image != blank %}
            <img class="carousel__image" src="{{ block.settings.image | image_url: width: 900 }}" alt="slider_img">
          {% else -%}
            <img
              class="slide fallback_carousel__image"
              src="{{'slider_img.png' | asset_img_url: '1500x741'}}"
              alt="slider_img"
            >
          {% endif %}
          <div class="text_container">
            <h2 class="h1">{{ block.settings.heading }}</h2>
            <p>{{ block.settings.text }}</p>
            {% if block.settings.btn_link != blank %}
              <a href="{{block.settings.btn_link}}">
            {% endif %}
            <button class="btn">{{ block.settings.btn_label }}</button>
            {% if block.settings.btn_link != blank %}
              </a>
            {% endif %}
          </div>
        </li>
      {% endfor %}
    </ul>
  </div>

  <button class="carousel__button padding carousel__button--right {% if section.settings.show_arrows == false %} visibility{% endif %}">
    {% render 'icon-right-arrow-new' %}
  </button>

  <div class="carousel__nav {% if section.settings.show_bullets == false %} visibility{% endif %}">
    {% for block in section.blocks %}
      <button class="carousel__indicator{% if forloop.first %} current-slide{% endif %}"></button>
    {% endfor %}
  </div>
</div>
<script>
  const track = document.querySelector('.carousel__track');
  const slides = Array.from(track.children);
  const nextButton = document.querySelector('.carousel__button--right');
  const prevButton = document.querySelector('.carousel__button--left');
  const dotsNav = document.querySelector('.carousel__nav');
  const dots = Array.from(dotsNav.children);
  const slideWidth = slides[0].getBoundingClientRect().width;
  // Arrange the slides next to one another
  const setSlidePosition = (slide, index) => {
    slide.style.left = slideWidth * index + 'px';
  };
  slides.forEach(setSlidePosition);

  // Move slide
  const moveToSlide = (currentSlide, targetSlide, targetDot, targetIndex) => {
    const currentDot = dotsNav.querySelector('.current-slide');
    track.style.transform = 'translateX(-' + targetSlide.style.left + ')';
    currentSlide.classList.remove('current-slide');
    targetSlide.classList.add('current-slide');

    currentDot.classList.remove('current-slide');
    targetDot.classList.add('current-slide');

    if (targetIndex === 0) {
      prevButton.classList.add('hidden');
      nextButton.classList.remove('hidden');
    } else if (targetIndex == slides.length - 1) {
      prevButton.classList.remove('hidden');
      nextButton.classList.add('hidden');
    } else {
      prevButton.classList.remove('hidden');
      nextButton.classList.remove('hidden');
    }
  };

  // when I click left, move slides to the left
  prevButton.addEventListener('click', (e) => {
    const currentSlide = track.querySelector('.current-slide');
    const prevSlide = currentSlide.previousElementSibling;
    const slideIndex = slides.findIndex((slide) => slide === prevSlide);
    const targetDot = dots[slideIndex];
    //move to the next slide
    moveToSlide(currentSlide, prevSlide, targetDot, slideIndex);
    if (prevSlide == currentSlide) {
      prevButton.classlist.add('hidden');
      moveToSlide(currentSlide, prevSlide, targetDot);
    }
  });

  // when I click right, move slides to the right
  nextButton.addEventListener('click', (e) => {
    const currentSlide = track.querySelector('.current-slide');
    const nextSlide = currentSlide.nextElementSibling;
    const slideIndex = slides.findIndex((slide) => slide === nextSlide);
    const targetDot = dots[slideIndex];

    //move to the next slide
    if (slideIndex != -1) moveToSlide(currentSlide, nextSlide, targetDot, slideIndex);
  });

  // when I click the nav indicators, move to that slide
  dotsNav.addEventListener('click', (e) => {
    const targetDot = e.target.closest('button');

    if (!targetDot) return;

    const currentSlide = track.querySelector('.current-slide');
    const targetIndex = dots.findIndex((dot) => dot === targetDot);
    const targetSlide = slides[targetIndex];

    moveToSlide(currentSlide, targetSlide, targetDot, targetIndex);
  });
</script>
{% schema %}
{
  "name": "Slideshow",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "checkbox",
      "id": "show_arrows",
      "default": true,
      "label": "Show arrows"
    },
    {
      "type": "checkbox",
      "id": "show_bullets",
      "default": true,
      "label": "Show bullets"
    },
    {
      "type": "range",
      "id": "speed_sliding",
      "min": 0,
      "max": 6,
      "step": 0.1,
      "unit": "s",
      "label": "Speed sliding",
      "default": 0.8
    },
    {
      "type": "header",
      "content": "Section margin"
    },
    {
      "type": "range",
      "id": "top_margin",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Top margin",
      "default": 0
    },
    {
      "type": "range",
      "id": "bottom_margin",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Bottom margin",
      "default": 0
    }
  ],
  "blocks": [
    {
      "type": "Slide",
      "name": "Slide Item",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "inline_richtext",
          "id": "heading",
          "label": "Heading",
          "default": "Slide heading"
        },
        {
          "type": "inline_richtext",
          "id": "text",
          "label": "Text",
          "default": "Text from here describes your slide"
        },
        {
          "type": "header",
          "content": "Button options"
        },
        {
          "type": "text",
          "id": "btn_label",
          "default": "See more",
          "label": "Label"
        },
        {
          "type": "url",
          "id": "btn_link",
          "label": "Link"
        }
      ]
    }
  ],

  "presets": [
    {
      "name": "Slideshow",
      "blocks": [
        {
          "type": "Slide"
        }
      ]
    }
  ]
}
{% endschema %}
